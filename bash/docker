#!/bin/bash
# Bash wrappers for docker run commands
# Based on https://github.com/jessfraz/dotfiles/blob/master/.dockerfunc

#
# Helper Functions
#
dcleanup(){
    local containers
    containers=( $(docker ps -aq 2>/dev/null) )
    docker rm "${containers[@]}" 2>/dev/null
    local volumes
    volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
    docker rm -v "${volumes[@]}" 2>/dev/null
    local images
    images=( $(docker images --filter dangling=true -q 2>/dev/null) )
    docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
    local name=$1
    local state
    state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

    if [[ "$state" == "false" ]]; then
        docker rm "$name"
    fi
}
relies_on(){
    for container in "$@"; do
        local state
        state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

        if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
            echo "$container is not running, starting it for you."
            $container
        fi
    done
}

#
# Container Aliases
#
cfn-check(){
    if [ -f "$1" ]; then
        arg1="$(readlink -f "$1"):/$1"
    else
        arg1="/tmp:/tmp"
    fi
    docker run --rm -it \
        -v "$arg1" \
        volkerfr/cfn-check "$@"
}
chrome(){
    del_stopped chrome

    if [ ! -f /tmp/.chrome.json ]; then
        wget -q https://raw.githubusercontent.com/jfrazelle/dotfiles/master/etc/docker/seccomp/chrome.json -O /tmp/.chrome.json
    fi

    docker run -d \
        --net host \
        --memory 3gb \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e "DISPLAY=unix${DISPLAY}" \
        -v "${HOME}/Downloads:/OutsideOfDocker" \
        -v "${HOME}/Downloads:/Downloads" \
        -v "$HOME/localdata/dotfiles/google-chrome:/data" \
        -v /dev/shm:/dev/shm \
        --hostname browser \
        --device /dev/snd \
        --device /dev/dri \
        --device /dev/video0 \
        --device /dev/bus/usb \
        --group-add audio \
        --group-add video \
        --user="$(id -u):$(id -g)" \
        --cap-add SYS_ADMIN \
        --name chrome \
        --security-opt seccomp="/tmp/.chrome.json" \
        jess/chrome --user-data-dir=/data \
        "$@"
}
curl-docker(){
    # /var/folders is macos temp
    docker run --rm -it \
        --net host \
        -v "$HOME:$HOME" \
        -v "/var/folders:/var/folders" \
        jess/curl "$@"
}
# Torrent client
deluge(){
    del_stopped deluge
    docker run \
        -e PUID="$(id -u)" \
        -e PGID="$(id -g)" \
        -e UMASK_SET=022 \
        -p 8112:8112 \
        -v ~/localdata/deluge-downloads:/downloads \
        -v ~/localdata/dotfiles/deluge:/config \
        --name deluge \
        linuxserver/deluge
}
diff-so-fancy(){
    docker run --rm -it \
        volker-fr/diff-so-fancy \
        "$@"
}
dropbox(){
    del_stopped dropbox

    # check if firefox container is running
    dropbox_state=$(docker inspect --format "{{.State.Running}}" dropbox 2>/dev/null)
    if [[ "$dropbox_state" == "true" ]]; then
        docker exec -it dropbox dropbox "$@"
    else
        docker run -d \
            --restart=always \
            --name=dropbox \
            -e DBOX_UID="$(id -u "$USER")" \
            -e DBOX_GID="$(id -g "$USER")" \
            -v "$HOME/Dropbox:/dbox/Dropbox" \
            -v "$HOME/localdata/dotfiles/dropbox:/dbox/.dropbox" \
            janeczku/dropbox \
        && sleep 15 \
        && docker logs dropbox
    fi
}
evince(){
    del_stopped evince

    if [ -f "$1" ]; then
        localdir=$(dirname $(readlink -f "$1"|uniq))
        echo "Mapping folder $localdir to the same location in docker"
        # for i3 d3menu hack execution...
        arg1="-v"
        arg2="$(readlink -f "$1"):/$1"
    else
        arg1=""
        arg2=""
    fi

    docker run -d \
            -v /etc/localtime:/etc/localtime:ro \
            -v /tmp/.X11-unix:/tmp/.X11-unix \
            -e "DISPLAY=unix${DISPLAY}" \
            $arg1 "$arg2" \
            -e GDK_SCALE \
            -e GDK_DPI_SCALE \
            --name evince \
            --entrypoint /usr/bin/evince \
            jess/evince "$@"
}
exiftool(){
    if [ -n "$1" ]; then
        docker run --rm -v "$PWD":/root/pub v4tech/exiftool exiftool "$@"
    else
        echo "$0 <args> <filename>"
    fi
    docker run --rm -v "$PWD":/root/pub v4tech/exiftool exiftool "$@"
}
fdupes(){
    # easiest is "fdupes -r $(pwd)"
    docker run -i -t --rm \
        -v "$(pwd):$(pwd):ro" \
        --entrypoint /usr/bin/fdupes \
        meedan/fdupes \
        "$@"
}
firefox(){
    del_stopped firefox

    # check if firefox container is running
    firefox_state=$(docker inspect --format "{{.State.Running}}" firefox 2>/dev/null)
    if [[ "$firefox_state" == "true" ]]; then
        docker exec -i firefox /usr/bin/firefox "$@" 2>/dev/null
    else
        # --ipc=host: Else the browser might crash on some websites
            #--net host \
        #    --link pulseaudio-docker:pulseaudio-docker \
        docker -D run -d \
            --memory 2gb \
            --cpuset-cpus 0 \
            --ipc="host" \
            --user="$(id -u):$(id -g)" \
            -v /etc/localtime:/etc/localtime:ro \
            -v /tmp/.X11-unix:/tmp/.X11-unix \
            -v "$XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR" \
            -v "${HOME}/Downloads:/root/OutsideOfDocker" \
            -v "${HOME}/Downloads:/root/Downloads" \
            -v "${HOME}/localdata/dotfiles/firefox/dot_mozilla:/.mozilla" \
            -v "${HOME}/localdata/dotfiles/firefox/dot_cache:/.cache" \
            -e "DISPLAY=unix${DISPLAY}" \
            -e GDK_SCALE \
            -e GDK_DPI_SCALE \
            -e XDG_RUNTIME_DIR \
            --device /dev/snd \
            --device /dev/dri \
            --name firefox \
            jess/firefox "$@"
    fi
}
gcalcli(){
    if [ ! -d "${HOME}/localdata/dotfiles/gcalcli/" ]; then
        mkdir -p "${HOME}/localdata/dotfiles/gcalcli"
        touch "${HOME}/localdata/dotfiles/gcalcli/gcalcli_oauth"
        touch "${HOME}/localdata/dotfiles/gcalcli/gcalclirc"
    fi
    docker run --rm -it \
        -v /etc/localtime:/etc/localtime:ro \
        -v "${HOME}/localdata/dotfiles/gcalcli/gcalcli_oauth:/home/gcalcli/.gcalcli_oauth" \
        -v "${HOME}/localdata/dotfiles/gcalcli/gcalclirc:/home/gcalcli/.gcalclirc" \
        --name gcalcli \
        jess/gcalcli "$@"
}
gimp(){
    docker run -t --rm -it \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY="unix$DISPLAY" \
        -v "$HOME/sync/gimp:/root/hostos" \
        -v "$HOME/sync/gimp:/root/Pictures" \
        --name gimp \
        jess/gimp
}
htop(){
    docker run --rm -it \
        --pid host \
        --net none \
        --name htop \
        jess/htop
}
libreoffice-docker(){
    del_stopped libreoffice

    if [ -f "$1" ]; then
        echo "Mapping file $(readlink -f "$1")"
        echo "          to $1"
        # for i3 d3menu hack execution...
        arg1="-v"
        arg2="$(readlink -f "$1"):/$1"
    else
        arg1=""
        arg2=""
    fi

    docker run -d \
            -v /etc/localtime:/etc/localtime:ro \
            -v /tmp/.X11-unix:/tmp/.X11-unix \
            -e "DISPLAY=unix${DISPLAY}" \
            -v "${HOME}/Downloads:/root/OutsideOfDocker" \
            $arg1 "$arg2" \
            -e GDK_SCALE \
            -e GDK_DPI_SCALE \
            --name libreoffice \
            jess/libreoffice "$@"
}
ngrok(){
    docker run --rm -it \
        --link "$1":http wernight/ngrok ngrok http http:80
}
# https://www.getnikola.com/
nikola() {
    if [ "$1" != 'init' -a  ! -f conf.py ]; then
        echo "This is not a nikola folder. If you want to initialize a new one, run"
        echo "   nikola init"
        echo "And choose /nikola for the data file. Alternatively run"
        echo "   nikola init -q /nikola"
    else
        docker run --rm -it \
            -v "$(pwd):/nikola" \
            -p 8000:8000 \
            dragas/nikola \
                nikola "$@"
    fi
}
nmap(){
    docker run --rm -it \
        --net host \
        jess/nmap "$@"
}
oathtool(){
    docker run --rm -it \
         -v /etc/localtime:/etc/localtime \
        toolbelt/oathtool "$@"
}
otrdecoder(){
    # contains the secrets
    docker run --rm -it \
        -e "otrEmail=${otrusername}" \
        -e "otrPassword=${otrpassword}" \
        -e "convert=false" \
        -v "$HOME/Downloads:/otr" \
        develcab/otr
}
pdflatex(){
    if [ -n "$1" ]; then
        docker run --rm -it \
            --workdir="/root/pub" \
            -v "$PWD":/root/pub \
            aergus/latex \
            pdflatex "$@"
    else
        echo "$0 <args> <filename>"
    fi
}
plex(){
    del_stopped plex

    docker run -d \
        --name=plex \
        --net=host \
        -e VERSION=latest \
        -e PUID="$(id -u "$USER")" \
        -e PGID="$(id -g "$USER")" \
        -e TZ="$(cat /etc/timezone)" \
        -e PLEX_ALLOWED_NETWORKS="192.168.0.0/16,172.16.0.0/12" \
        -v "${HOME}/localdata/dotfiles/plex/config:/config" \
        -v "${HOME}/localdata/anschauen:/data:ro" \
        -v "${HOME}/localdata/dotfiles/plex/transcode:/transcode" \
        linuxserver/plex

    echo "$(ip route get 1 | awk '{print $7}'):32400/web"
    echo "$(ip route get 1 | awk '{print $7}'):33400/"
}
rtorrent(){
    del_stopped rtorrentvpn
    #    -e LAN_NETWORK="127.0.0.1/32" \
    #    -e LAN_NETWORK="172.17.0.0/16" \
    #    -e STRICT_PORT_FORWARD=yes \
    docker run -d \
        --cap-add=NET_ADMIN \
        -p 9080:9080 \
        -p 9443:9443 \
        -p 8118:8118 \
        -p 3000:3000 \
        --name=rtorrentvpn \
        -v ~/localdata/rtorrent-data:/data \
        -v ~/localdata/dotfiles/rtorrent/config:/config \
        -e VPN_ENABLED=yes \
        -e VPN_USER="$PIA_USERNAME" \
        -e VPN_PASS="$PIA_PASSWORD" \
        -e VPN_PROV=pia \
        -e STRICT_PORT_FORWARD=no \
        -e ENABLE_PRIVOXY=yes \
        -e ENABLE_FLOOD=yes \
        -e ENABLE_AUTODL_IRSSI=no \
        -e LAN_NETWORK="172.17.0.0/16" \
        -e NAME_SERVERS=8.8.8.8,8.8.4.4 \
        -e DEBUG=false \
        -e PHP_TZ=UTC \
        -e UMASK=020 \
        -e PUID="$(id -u)" \
        -e PGID="$(id -g)" \
        binhex/arch-rtorrentvpn
        echo "https://www.privateinternetaccess.com/openvpn/openvpn.zip"
        echo "Download & copy to ~/localdata/dotfiles/rtorrent/config/openvpn"
        echo "docker exec -it rtorrentvpn dig +short myip.opendns.com @resolver1.opendns.com"
        echo "http://127.0.0.1:9080/ - admin:rutorrent"
        echo "http://127.0.0.1:3000/ - admin:rutorrent"
}
slack(){
    del_stopped slack

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e "DISPLAY=unix${DISPLAY}" \
        --ipc="host" \
        --device /dev/snd \
        --device /dev/dri \
        --device /dev/video0 \
        --group-add audio \
        --group-add video \
        -v "${HOME}/localdata/bin/x-www-forwarder-client-0.0.1:/usr/bin/x-www-browser:ro" \
        -v "${HOME}/.x-www-forwarder.sock:/var/run/browser.sock" \
        -v "${HOME}/localdata/dotfiles/slack:/root/.config/Slack" \
        -v "${HOME}/Downloads:/root/OutsideOfDocker" \
        --name slack \
        jess/slack "$@"
}
thunderbird(){
    del_stopped thunderbird

    docker run -d \
        --memory 500mb \
        --net host \
        --cpuset-cpus 0 \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e "DISPLAY=unix${DISPLAY}" \
        -e UID=${UID} \
        -e GID=${UID} \
        -v "${HOME}/localdata/bin/x-www-forwarder-client-0.0.1:/usr/bin/x-www-browser:ro" \
        -v "${HOME}/.x-www-forwarder.sock:/var/run/browser.sock" \
        -v "${HOME}/localdata/dotfiles/thunderbird/dot_thunderbird:/home/svc/.thunderbird" \
        -v "${HOME}/localdata/dotfiles/thunderbird/dot_mozilla:/home/svc/.mozilla" \
        -v "${HOME}/Downloads:/root/OutsideOfDocker" \
        -v "${HOME}/Downloads:/root/Downloads" \
        --name thunderbird \
        simbelmas/thunderbird "$@"
}
tldr(){
    docker run --rm -it \
        s3than/tldr \
        --theme original "$@"
}
traceroute(){
    docker run --rm -it \
        --net host \
        jess/traceroute "$@"
}
whois(){
    docker run --rm -it \
        airtonzanon/whois "$@"
}
vlc-docker(){
    del_stopped vlc

    #    --device=/dev/sr0 \
    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e "DISPLAY=unix${DISPLAY}" \
        -e GDK_SCALE \
        -e GDK_DPI_SCALE \
        -e QT_DEVICE_PIXEL_RATIO \
        --device /dev/snd \
        --device /dev/dri \
        --group-add audio \
        --group-add video \
        -v "${HOME}/localdata/anschauen:/home/vlc/anschauen" \
        --device /dev/dri \
        --name vlc \
        jess/vlc
}
x11vnc(){
    export DISPLAY=:0
    xhost +SI:localuser:root

    docker run --rm -it \
        -p 5900:5900 \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /etc/localtime:/etc/localtime:ro \
        --ipc=host \
        volkerfr/x11vnc "$@"
}
w3m(){
    docker run --rm -it \
        --net host \
        corbinu/alpine-w3m "$@"
}
